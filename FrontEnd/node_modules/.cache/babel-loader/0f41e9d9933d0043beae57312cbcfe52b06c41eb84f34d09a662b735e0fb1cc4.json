{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, SIGNUP_SUCCESS, SIGNUP_FAIL, LOGOUT, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAIL, PASSWORD_RESET_CONFIRM_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, ACTIVATION_FAIL, ACTIVATION_SUCCESS, AUTHENTICATED_FAIL } from \"./types\";\nimport axios from \"axios\";\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n    try {\n      const res = axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n      if ((await res).data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(\"LOGIN_FAIL\");\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n    console.log(\"LOGIN_SUCCESS\");\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body);\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGOUT","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","PASSWORD_RESET_CONFIRM_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","ACTIVATION_FAIL","ACTIVATION_SUCCESS","AUTHENTICATED_FAIL","axios","checkAuthenticated","dispatch","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","process","env","REACT_APP_API_URL","data","code","type","err","load_user","get","payload","console","log","login","email","password","reset_password","reset_password_confirm","uid","new_password","re_new_password","logout"],"sources":["D:/Github/Fridge2Food/FrontEnd/src/actions/auth.js"],"sourcesContent":["import {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    LOGOUT,\r\n    PASSWORD_RESET_SUCCESS,\r\n    PASSWORD_RESET_FAIL,\r\n    PASSWORD_RESET_CONFIRM_FAIL,\r\n    PASSWORD_RESET_CONFIRM_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    ACTIVATION_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n\r\n} from \"./types\"\r\nimport axios from \"axios\";\r\n\r\nexport const checkAuthenticated = () => async dispatch => {\r\n    if(localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({ token: localStorage.getItem('access')});\r\n\r\n        try {\r\n            const res = axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\r\n\r\n            if ((await res).data.code !== 'token_not_valid') {\r\n                 dispatch ({\r\n                    type: AUTHENTICATED_SUCCESS\r\n                });\r\n            } else {\r\n                dispatch ({\r\n                    type: AUTHENTICATED_FAIL\r\n                });\r\n            }\r\n        } catch (err) {\r\n            dispatch ({\r\n            type: AUTHENTICATED_FAIL\r\n        });\r\n        }\r\n    } else {\r\n        dispatch ({\r\n            type: AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n}\r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\r\n\r\n            dispatch({\r\n                type: USER_LOADED_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        } catch (err) {\r\n            console.log(\"LOGIN_FAIL\")\r\n            dispatch({\r\n                type: USER_LOADED_FAIL\r\n            });\r\n        }\r\n        console.log(\"LOGIN_SUCCESS\")\r\n    } else {\r\n        dispatch({\r\n            type: USER_LOADED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n    console.log(body)\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(load_user());\r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        })\r\n    }\r\n};\r\n\r\nexport const reset_password = (email) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email });\r\n\r\n    try {\r\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\r\n\r\n        dispatch({\r\n            type: PASSWORD_RESET_SUCCESS\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PASSWORD_RESET_FAIL\r\n        });\r\n    }\r\n};\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n\r\n    try {\r\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\r\n\r\n        dispatch({\r\n            type: PASSWORD_RESET_CONFIRM_SUCCESS\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PASSWORD_RESET_CONFIRM_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch({\r\n        type: LOGOUT\r\n    });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}